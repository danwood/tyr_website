/* -------- GENERAL CSS DECLARATIONS -------- */
/* The big deal that gives us the sizing model that makes all of this possible http://paulirish.com/2012/box-sizing-border-box-ftw/ */
*, *:before, *:after {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box; }

/* To measure your image in pixels and don't want to include padding and border, the .exact class takes <img> back to content-box sizing. */
img.exact {
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  box-sizing: content-box; }

/* Grids are always centered. Not sure if we want to keep the overflow hidden that came from source system. */
/* display:block to help with images */
.centered {
  display: block;
  margin: 0 auto; }

/* The micro clearfix http://nicolasgallagher.com/micro-clearfix-hack/ */
.clearfix:before, .clearfix:after {
  content: " ";
  display: table; }

.clearfix:after {
  clear: both; }

/* Boxes are display:inline, and then floated left to right or right to left (as declared later) */
/* Default to 100%, this is mobile-first, and it also makes our media quaries simpler since we only have to declare non-100% values */
.inlinebox {
  width: 100%; }

/* Generic definition for 'box' */
.inlinebox {
  float: left; }

/* Default is Left to Right; can override with directionRtoL */
.directionRtoL .inlinebox {
  float: right; }

/* Specify normal direction for boxes based on ancestor's direction */
.inlinebox.opposite {
  float: right; }

.directionRtoL .inlinebox.opposite {
  float: left; }

/* ... and force box to be on opposite side of normal flow */
.fullwidth {
  width: 100%; }

/* for images, form elements, etc. which should be the full width of their container */
.nobottom {
  margin-bottom: 0 !important; }

/* Utility to force an element to have no bottom margin. [If not important, overridden by grid-system's inlinebox selector.] */
p:last-child, blockquote:last-child {
  margin-bottom: 0; }

.position-container {
  position: relative; }

/* for position-container of some custom-positioned element */
/* SPECIFIC GRID LAYOUT CHOICES: We probably want to move this into styles.css once we have this decided */
/* ==========================================================================
   Functions
   ========================================================================== */
/* ==========================================================================
   General -- Grid System for 'body'
   ========================================================================== */
/* Gutter Declarations */
.outdented {
  margin: 0 -15px;
  /* Nested row outdents so that columns will line up */ }

.pullbottom {
  margin-bottom: -30px;
  /* Also remove bottom padding introduced by contained inlinebox divs. Usually you want this except for when negative bottom margin screws up stuff below it. */ }

.inlinebox {
  padding: 0 15px;
  /* Half of gutter on both sides */
  margin-bottom: 30px;
  /* Vertical space between inlinebox. */ }

/* Container for no gutter, e.g. for image galleries */
.nogutter .outdented, .nogutter .pullbottom, .nogutter .inlinebox {
  margin: 0; }

.nogutter .inlinebox {
  padding: 0; }

/* These work as I'd want for things like images with a fixed size -- not the grid, which deals in percentages. */
.floated {
  /* Default is direction Left to Right */
  clear: left;
  float: left;
  margin: 0 30px 10px 0; }

.floated-tight {
  /* Default is direction Left to Right */
  clear: left;
  float: left;
  margin: 0 15px 10px 0; }

.directionRtoL .floated {
  float: right;
  margin: 0 0 10px 30px; }

.directionRtoL .floated-tight {
  float: right;
  margin: 0 0 10px 15px; }

.floated.opposite {
  clear: right;
  float: right;
  margin: 0 0 10px 30px; }

.floated-tight.opposite {
  float: right;
  margin: 0 0 10px 15px; }

.directionRtoL .floated.opposite {
  clear: left;
  float: left;
  margin: 0 30px 10px 0; }

.directionRtoL .floated-tight.opposite {
  float: left;
  margin: 0 15px 10px 0; }

.small-block {
  display: block;
  max-width: 25%; }

.medium-block {
  display: block;
  max-width: 33.33%; }

.large-block {
  display: block;
  max-width: 50%; }

.full-block {
  display: block;
  max-width: 100%; }

@media only screen and (max-width: 35.99em) {
  .small-block {
    max-width: 50%; }

  .medium-block {
    max-width: 100%; }

  .floated.medium-block {
    float: none;
    margin: 0 auto 10px auto; } }
@media only screen and (max-width: 47.99em) {
  .large-block {
    max-width: 100%; }

  .floated.large-block {
    float: none;
    margin: 0 auto 10px auto; } }
.inlinebox.floated.opposite {
  margin-left: 15px;
  /* Only need half-gutter width */ }

.directionRtoL .inlinebox.floated.opposite {
  margin-right: 15px;
  /* Only need half-gutter width */ }

/* Can a "floated" inlinebox have its own special margins? */
.sidebar {
  padding: 1px 20px 20px 20px;
  /* Why 1px top padding? */
  margin-bottom: 10px; }

.capped-width {
  margin: 0 auto;
  max-width: 61em;
  /* Wide viewports, don't let liquid layout get too wide */ }

/* TODO: I would like to have a full gutter's left/right margin, not half-gutter's worth, so I should improve this. */
/* TODO: It would be nice if all groups could have a negative margin equivalent to inline box, so that there isn't extra space below allocated */
section {
  padding-top: 3em;
  /* No bottom padding; already handled by boxes */
  clear: both; }
  @media only screen and (max-width: 35.99em) {
    section {
      padding-top: 2em; } }

section:first-child {
  padding-top: 3.5em; }
  @media only screen and (max-width: 35.99em) {
    section:first-child {
      padding-top: 2.5em; } }

section:last-child {
  padding-bottom: 3.5em; }
  @media only screen and (max-width: 35.99em) {
    section:last-child {
      padding-bottom: 2.5em; } }

.same-height-container {
  overflow: hidden; }

.same-height {
  padding-bottom: 1000px;
  margin-bottom: -1000px; }

/* The height, and also the minimum width, are both designer-defined here. */
@media only screen and (min-width: 36em) {
  .Footer-Container {
    height: 8em;
    /* only when footer is sticky */ }

  html, body, .outside-sticky-footer {
    /* Every div enclosing needs to be 100% or the thing falls apart. So can we eliminate any nested divs? */
    height: 100%; }

  .contain-sticky-footer {
    min-height: 100%;
    display: table;
    height: 100%; }

  .before-sticky-footer {
    overflow: auto;
    padding-bottom: 8em; }

  .sticky-footer {
    position: relative;
    margin-top: -8em;
    clear: both; } }
/* Wider breakpoint to make footer less tall. Overrides above. */
@media only screen and (min-width: 42em) {
  .Footer-Container {
    height: 7em; }

  .before-sticky-footer {
    padding-bottom: 7em; }

  .sticky-footer {
    margin-top: -7em; } }
